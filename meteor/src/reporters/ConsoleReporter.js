var ClientServerBaseReporter, ConsoleReporter, MochaRunner, ObjectLogger, log,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MochaRunner = require("../lib/MochaRunner");

ObjectLogger = require("meteor/practicalmeteor:loglevel").ObjectLogger;

ClientServerBaseReporter = require("./ClientServerBaseReporter");

log = new ObjectLogger('ConsoleReporter', 'info');

ConsoleReporter = (function(superClass) {
  extend(ConsoleReporter, superClass);

  function ConsoleReporter(clientRunner, serverRunner, options) {
    this.clientRunner = clientRunner;
    this.serverRunner = serverRunner;
    this.options = options;
    this.finishAndPrintTestsSummary = bind(this.finishAndPrintTestsSummary, this);
    this.printReporterHeader = bind(this.printReporterHeader, this);
    try {
      log.enter('constructor');
      ConsoleReporter.__super__.constructor.call(this, this.clientRunner, this.serverRunner, this.options);
      MochaRunner.on("end all", (function(_this) {
        return function() {
          return _this.finishAndPrintTestsSummary();
        };
      })(this));
    } finally {
      log["return"]();
    }
  }


  /*
    Overwriting from ClientServerBaseReporter
   */

  ConsoleReporter.prototype.registerRunnerEvents = function(where) {
    try {
      log.enter("registerRunnerEvents");
      ConsoleReporter.__super__.registerRunnerEvents.call(this, where);
      this[where + "Runner"].on("start", (function(_this) {
        return function() {
          return _this.printReporterHeader(where);
        };
      })(this));
      this[where + "Runner"].on('test end', (function(_this) {
        return function(test) {
          return _this.printTest(test, where);
        };
      })(this));
      return this[where + "Runner"].on("fail", (function(_this) {
        return function(hook) {
          if (hook.type === 'hook') {
            return _this.printTest(hook, where);
          }
        };
      })(this));
    } finally {
      log["return"]();
    }
  };

  ConsoleReporter.prototype.printReporterHeader = function(where) {
    try {
      log.enter("printReporterHeader", where);
      if (this.options.runOrder !== 'serial') {
        return;
      }
      where = where[0].toUpperCase() + where.substr(1);
      console.log("\n--------------------------------------------------");
      console.log("------------------ " + where + " tests ------------------");
      return console.log("--------------------------------------------------\n");
    } finally {
      log["return"]();
    }
  };

  ConsoleReporter.prototype.printTest = function(test, where) {
    var state;
    try {
      log.enter("prinTest", test);
      state = test.state || (test.pending ? "pending" : void 0);
      if (this.options.runOrder === 'serial') {
        where = "";
      } else {
        where = where[0].toUpperCase() + ": ";
      }
      console.log("" + where + (test.fullTitle()) + " : " + state);
      if (test.state === "failed") {
        console.log("  " + (test.err.stack || test.err));
      }
      return console.log("");
    } finally {
      log["return"]();
    }
  };

  ConsoleReporter.prototype.finishAndPrintTestsSummary = function() {
    var ref, ref1;
    try {
      log.enter("finishAndPrintTestsSummary");
      if ((((ref = this.clientStats) != null ? ref.total : void 0) == null) || (((ref1 = this.serverStats) != null ? ref1.total : void 0) == null)) {
        return;
      }
      console.log("\n--------------------------------------------------");
      console.log("---------------------RESULTS----------------------");
      console.log("PASSED:", this.stats.passes);
      console.log("FAILED:", this.stats.failures);
      console.log("SKIPPED:", this.stats.pending);
      console.log("TOTAL:", this.stats.total);
      console.log("--------------------------------------------------");
      return console.log("--------------------------------------------------\n");
    } finally {
      log["return"]();
    }
  };

  return ConsoleReporter;

})(ClientServerBaseReporter);

module.exports = ConsoleReporter;

// ---
// generated by coffee-script 1.9.2
